import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import select
from .models import User, Task, Category, Priority, UserCategory
from .keyboards import (
    get_main_keyboard, get_task_keyboard, get_task_actions_keyboard,
    get_priority_keyboard, get_categories_keyboard, get_settings_keyboard,
    get_edit_task_keyboard
)
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.asyncio import AsyncSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

class TaskStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_due_date = State()
    waiting_for_priority = State()
    waiting_for_category = State()
    waiting_for_task_to_delete = State()
    waiting_for_task_to_complete = State()
    waiting_for_category_name = State()
    waiting_for_category_color = State()
    waiting_for_notification_time = State()
    waiting_for_edit_title = State()
    waiting_for_edit_description = State()
    waiting_for_edit_date = State()
    waiting_for_edit_priority = State()
    waiting_for_edit_category = State()

@router.message(Command("start"))
async def cmd_start(message: Message, session: Session):
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        await session.commit()
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ToDo –±–æ—Ç!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üìù /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚úÖ /done - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "‚ùå /delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(TaskStates.waiting_for_title)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(TaskStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(TaskStates.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ):")

@router.message(TaskStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = message.text if message.text != "-" else None
    await state.update_data(description=description)
    await state.set_state(TaskStates.waiting_for_due_date)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞):")

@router.message(TaskStates.waiting_for_due_date)
async def process_due_date(message: Message, state: FSMContext, session: Session):
    data = await state.get_data()
    
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one()
    
    due_date = None
    if message.text != "-":
        try:
            due_date = datetime.strptime(message.text, "%d.%m.%Y")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    
    task = Task(
        user_id=user.id,
        title=data["title"],
        description=data["description"],
        due_date=due_date
    )
    
    session.add(task)
    await session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("list"))
async def cmd_list(message: Message, session: Session):
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one()
    
    result = await session.execute(
        select(Task).where(Task.user_id == user.id)
    )
    tasks = result.scalars().all()
    
    if not tasks:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")
        return
    
    text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ" if task.is_completed else "‚è≥"
        due_date = f"\nüìÖ –î–æ: {task.due_date.strftime('%d.%m.%Y')}" if task.due_date else ""
        text += f"{status} {task.title}{due_date}\n"
    
    await message.answer(text, reply_markup=get_task_keyboard(tasks))

@router.message(Command("delete"))
async def cmd_delete(message: Message, state: FSMContext, session: Session):
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one()
    
    result = await session.execute(
        select(Task).where(Task.user_id == user.id)
    )
    tasks = result.scalars().all()
    
    if not tasks:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return
    
    await state.set_state(TaskStates.waiting_for_task_to_delete)
    await message.answer(
        "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_task_keyboard(tasks)
    )

@router.callback_query(TaskStates.waiting_for_task_to_delete)
async def process_task_deletion(callback: CallbackQuery, state: FSMContext, session: Session):
    task_id = int(callback.data.split("_")[1])
    result = await session.execute(
        select(Task).where(Task.id == task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    await session.delete(task)
    await session.commit()
    
    await state.clear()
    await callback.message.answer(
        "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.message(Command("done"))
async def cmd_done(message: Message, state: FSMContext, session: Session):
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one()
    
    result = await session.execute(
        select(Task).where(
            Task.user_id == user.id,
            Task.is_completed == False
        )
    )
    tasks = result.scalars().all()
    
    if not tasks:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    await state.set_state(TaskStates.waiting_for_task_to_complete)
    await message.answer(
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:",
        reply_markup=get_task_keyboard(tasks)
    )

@router.callback_query(TaskStates.waiting_for_task_to_complete)
async def process_task_completion(callback: CallbackQuery, state: FSMContext, session: Session):
    task_id = int(callback.data.split("_")[1])
    result = await session.execute(
        select(Task).where(Task.id == task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task.is_completed = True
    await session.commit()
    
    await state.clear()
    await callback.message.answer(
        "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("task_"))
async def process_task_callback(callback: CallbackQuery, session: Session):
    task_id = int(callback.data.split("_")[1])
    result = await session.execute(
        select(Task).where(Task.id == task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    text = f"üìù {task.title}\n"
    if task.description:
        text += f"\nüìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{task.description}\n"
    if task.due_date:
        text += f"\nüìÖ –î–æ: {task.due_date.strftime('%d.%m.%Y')}\n"
    text += f"\n–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.is_completed else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
    
    await callback.message.answer(
        text,
        reply_markup=get_task_actions_keyboard(task)
    )
    await callback.answer()

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: Message, session: Session):
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one()
    
    result = await session.execute(
        select(Task).where(Task.user_id == user.id)
    )
    total_tasks = len(result.scalars().all())
    
    result = await session.execute(
        select(Task).where(
            Task.user_id == user.id,
            Task.is_completed == True
        )
    )
    completed_tasks = len(result.scalars().all())
    
    pending_tasks = total_tasks - completed_tasks
    
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
        f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {pending_tasks}\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {int((completed_tasks / total_tasks * 100) if total_tasks > 0 else 0)}%"
    )
    
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    text = (
        "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n\n"
        "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
        "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/done - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    await message.answer(text, reply_markup=get_main_keyboard())

@router.callback_query(F.data == "back_to_list")
async def process_back_to_list(callback: CallbackQuery, session: Session):
    result = await session.execute(
        select(User).where(User.telegram_id == callback.from_user.id)
    )
    user = result.scalar_one()
    
    result = await session.execute(
        select(Task).where(Task.user_id == user.id)
    )
    tasks = result.scalars().all()
    
    if not tasks:
        await callback.message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")
        return
    
    text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ" if task.is_completed else "‚è≥"
        due_date = f"\nüìÖ –î–æ: {task.due_date.strftime('%d.%m.%Y')}" if task.due_date else ""
        text += f"{status} {task.title}{due_date}\n"
    
    await callback.message.answer(text, reply_markup=get_task_keyboard(tasks))
    await callback.answer()

@router.callback_query(F.data.startswith("complete_"))
async def process_complete_task(callback: CallbackQuery, session: Session):
    task_id = int(callback.data.split("_")[1])
    result = await session.execute(
        select(Task).where(Task.id == task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task.is_completed = True
    await session.commit()
    
    await callback.message.answer(
        "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("delete_"))
async def process_delete_task(callback: CallbackQuery, session: Session):
    task_id = int(callback.data.split("_")[1])
    result = await session.execute(
        select(Task).where(Task.id == task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    await session.delete(task)
    await session.commit()
    
    await callback.message.answer(
        "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def cmd_add_button(message: Message, state: FSMContext):
    await cmd_add(message, state)

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def cmd_list_button(message: Message, session: Session):
    await cmd_list(message, session)

@router.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
async def cmd_completed(message: Message, session: Session):
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    tasks = session.query(Task).filter(
        Task.user_id == user.id,
        Task.is_completed == True
    ).all()
    
    if not tasks:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        due_date = f"\nüìÖ –î–æ: {task.due_date.strftime('%d.%m.%Y')}" if task.due_date else ""
        text += f"‚úÖ {task.title}{due_date}\n"
    
    await message.answer(text, reply_markup=get_task_keyboard(tasks))

@router.message(F.text == "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def cmd_categories(message: Message, session: Session):
    categories = session.query(Category).all()
    await message.answer(
        "üìÅ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_categories_keyboard(categories)
    )

@router.callback_query(F.data == "add_category")
async def process_add_category(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TaskStates.waiting_for_category_name)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await callback.answer()

@router.message(TaskStates.waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(TaskStates.waiting_for_category_color)
    await message.answer("üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, #FF0000):")

@router.message(TaskStates.waiting_for_category_color)
async def process_category_color(message: Message, state: FSMContext, session: Session):
    data = await state.get_data()
    try:
        category = Category(
            name=data["name"],
            color=message.text
        )
        session.add(category)
        session.commit()
        
        await state.clear()
        await message.answer(
            "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message):
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "notification_settings")
async def process_notification_settings(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TaskStates.waiting_for_notification_time)
    await callback.message.answer(
        "üîî –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24:"
    )
    await callback.answer()

@router.message(TaskStates.waiting_for_notification_time)
async def process_notification_time(message: Message, state: FSMContext, session: Session):
    try:
        hours = int(message.text)
        if not 1 <= hours <= 24:
            raise ValueError
        
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        user.notification_time = hours
        session.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hours} —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24:"
        )

@router.callback_query(F.data.startswith("edit_"))
async def process_edit_task(callback: CallbackQuery, session: Session):
    task_id = int(callback.data.split("_")[1])
    task = session.query(Task).filter(Task.id == task_id).first()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    await callback.message.answer(
        "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_task_keyboard(task)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_title_"))
async def process_edit_title(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[2])
    await state.update_data(task_id=task_id)
    await state.set_state(TaskStates.waiting_for_edit_title)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await callback.answer()

@router.message(TaskStates.waiting_for_edit_title)
async def process_new_title(message: Message, state: FSMContext, session: Session):
    data = await state.get_data()
    task = session.query(Task).filter(Task.id == data["task_id"]).first()
    
    if not task:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task.title = message.text
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data.startswith("edit_priority_"))
async def process_edit_priority(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[2])
    await state.update_data(task_id=task_id)
    await state.set_state(TaskStates.waiting_for_edit_priority)
    await callback.message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=get_priority_keyboard()
    )
    await callback.answer()

@router.callback_query(TaskStates.waiting_for_edit_priority)
async def process_new_priority(callback: CallbackQuery, state: FSMContext, session: Session):
    data = await state.get_data()
    task = session.query(Task).filter(Task.id == data["task_id"]).first()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    priority_map = {
        "priority_high": Priority.HIGH,
        "priority_medium": Priority.MEDIUM,
        "priority_low": Priority.LOW
    }
    
    task.priority = priority_map[callback.data]
    session.commit()
    
    await state.clear()
    await callback.message.answer(
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "export_tasks")
async def process_export_tasks(callback: CallbackQuery, session: Session):
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    tasks = session.query(Task).filter(Task.user_id == user.id).all()
    
    if not tasks:
        await callback.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
        return
    
    import json
    from datetime import datetime
    
    tasks_data = []
    for task in tasks:
        tasks_data.append({
            "title": task.title,
            "description": task.description,
            "is_completed": task.is_completed,
            "created_at": task.created_at.isoformat(),
            "due_date": task.due_date.isoformat() if task.due_date else None,
            "priority": task.priority.value,
            "category": task.category.name if task.category else None
        })
    
    await callback.message.answer_document(
        document=json.dumps(tasks_data, ensure_ascii=False, indent=2),
        filename=f"tasks_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    )
    await callback.answer()

@router.message(F.document)
async def process_import_tasks(message: Message, session: Session):
    try:
        import json
        from datetime import datetime
        
        file = await message.bot.download(message.document)
        tasks_data = json.loads(file.read())
        
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        for task_data in tasks_data:
            task = Task(
                user_id=user.id,
                title=task_data["title"],
                description=task_data["description"],
                is_completed=task_data["is_completed"],
                created_at=datetime.fromisoformat(task_data["created_at"]),
                due_date=datetime.fromisoformat(task_data["due_date"]) if task_data["due_date"] else None,
                priority=Priority(task_data["priority"])
            )
            session.add(task)
        
        session.commit()
        await message.answer(
            "‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.",
            reply_markup=get_main_keyboard()
        )

async def check_notifications(bot, engine):
    while True:
        try:
            async_session = sessionmaker(
                engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            async with async_session() as session:
                now = datetime.now()
                users = await session.execute(select(User))
                users = users.scalars().all()
                
                for user in users:
                    tasks = await session.execute(
                        select(Task).where(
                            Task.user_id == user.id,
                            Task.is_completed == False,
                            Task.due_date != None,
                            Task.last_notified == None
                        )
                    )
                    tasks = tasks.scalars().all()
                    
                    for task in tasks:
                        time_diff = task.due_date - now
                        if time_diff.total_seconds() <= user.notification_time * 3600:
                            try:
                                await bot.send_message(
                                    user.telegram_id,
                                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                                    f"–ó–∞–¥–∞—á–∞ \"{task.title}\" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ {task.due_date.strftime('%d.%m.%Y %H:%M')}!"
                                )
                                task.last_notified = now
                                await session.commit()
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_notifications: {e}")
        
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç 